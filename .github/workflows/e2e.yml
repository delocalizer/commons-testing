name: e2e

on:
  workflow_dispatch: {}  # manual trigger

permissions:
  contents: write  # needed to push to gh-pages

jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      # 1) Runtime config
      BASE_URL: ${{ vars.BASE_URL }}
      USER_TIER2_USERNAME: ${{ secrets.USER_TIER2_USERNAME }}
      USER_TIER2_PASSWORD: ${{ secrets.USER_TIER2_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      # 2) Python + Poetry + deps
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install project dependencies (Poetry)
        run: poetry install --no-interaction --no-ansi --only test

      # 3) Playwright browsers / OS deps (no caching yet)
      - name: Install Playwright browsers and deps
        run: poetry run python -m playwright install --with-deps

      # 4) Run tests and write HTML report to playwright-report/report.html
      - name: Run pytest (generate HTML report)
        run: |
          mkdir -p playwright-report
          poetry run pytest

      # 5) Publish the report as a workflow artifact (visible on the run page)
      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 14

      # 6) Publish the report to gh pages
      - name: Upload HTML report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy-pages:
    name: Publish report to GitHub Pages
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (empty working dir)
        uses: actions/checkout@v4

      - name: Download report artifact
        uses: actions/download-artifact@v4
        with:
          name: playwright-report
          path: _report_staging/

      - name: Prepare site bundle
        run: |
          set -e
          mkdir -p public/runs/run-${{ github.run_number }}
          # Move the generated report under a per-run path
          mv _report_staging/report.html public/runs/run-${{ github.run_number }}/report.html

          # index.html that lists all runs dynamically via the GitHub API
          cat > public/index.html <<'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>E2E Report Runs</title>
          <style>
            body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin: 2rem; }
            h1 { margin-bottom: .5rem; }
            .muted { color:#666; font-size:.9rem; }
            ul { line-height:1.8; }
            code { background:#f6f8fa; padding:.2rem .4rem; border-radius:4px; }
          </style>
          <h1>E2E Reports</h1>
          <p class="muted">This page lists all published run reports from GitHub Actions.</p>
          <ul id="runs"></ul>
          <script>
            (async () => {
              // Derive owner/repo from the current Pages URL
              // Paths look like: /OWNER/REPO/...
              const parts = location.pathname.split("/").filter(Boolean);
              const owner = parts[0];
              const repo  = parts[1];
              const api = `https://api.github.com/repos/${owner}/${repo}/contents/runs?ref=gh-pages`;
              try {
                const res = await fetch(api, { headers: { 'Accept': 'application/vnd.github+json' }});
                if (!res.ok) throw new Error('Failed to load runs');
                const items = await res.json();
                // Items are directories like run-1234
                const runs = items
                  .filter(it => it.type === 'dir' && /^run-\d+$/.test(it.name))
                  .map(it => ({
                    name: it.name,
                    n: parseInt(it.name.replace('run-',''), 10),
                    url: `${location.origin}/${owner}/${repo}/runs/${it.name}/report.html`
                  }))
                  .sort((a,b) => b.n - a.n); // newest first
                const ul = document.getElementById('runs');
                if (runs.length === 0) {
                  ul.innerHTML = '<li>No runs found yet.</li>';
                  return;
                }
                ul.innerHTML = runs.map(r => `<li><a href="${r.url}">${r.name}</a></li>`).join('');
              } catch (e) {
                document.getElementById('runs').innerHTML = '<li>Error loading run list</li>';
              }
            })();
          </script>
          HTML

      - name: Publish to gh-pages (append-only)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: public
          # Keep previously published files so history accumulates:
          keep_files: true
          # Use a custom commit message (optional)
          commit_message: "Publish report for run ${{ github.run_number }}"

